#!/usr/bin/env python3

def deprefix(val, prefix, check=False):
    if val.startswith(prefix):
        return val[len(prefix):]
    elif check:
        raise RuntimeError('{!r} does not start with {!r}'.format(val, prefix))
    return val


def desuffix(val, suffix, check=False):
    if val.endswith(suffix):
        return val[:-len(suffix)]
    elif check:
        raise RuntimeError('{!r} does not end with {!r}'.format(val, suffix))
    return val


def parse_helper_mode_header(mode):
    # git does not preserve all file permission bits, it only knows of four
    # possible modes
    if mode == '100644':
        return 'regular'
    if mode == '100755':
        return 'executable'
    if mode == '120000':
        return 'symlink'
    if mode == '160000':
        return 'submodule'
    raise RuntimeError('{!r} is not a recognized mode'.format(mode))


def parse_helper_quoted_filename(filename):
    # git will quote a filename if it contains at least one of: tab, newline,
    # quote or backslash
    # it will quote the entire filename and then backslash-escape all of those
    # characters
    # if a filename does not contain any of those, then git will print it
    # completely unquoted
    return filename


def parse_helper_similarity(similarity_percent):
    return int(deprefix(similarity_percent, '%', check=True))


def parse_helper_index_header(index):
    # the index extended header consists of the sha1 hashes of the blobs before
    # and after the diff, separated by a ".."
    # the index header will then have the mode, if it was unchanged
    # if the mode was changed, then the index header will omit it, and other
    # headers will indicate the changes that applied there
    index_split = index.split(' ')
    [blob_old, blob_new] = index_split[0].split('..')
    if len(index_split) == 1:
        mode = ''
    elif len(index_split) == 2:
        mode = parse_helper_mode_header(index_split[1])
    else:
        raise RuntimeError('index contains multiple splits {!r}'.format(index_split))
    return {
        'old': blob_old,
        'new': blob_new,
        'mode': mode,
    }


def parse_helper_hunk_count(hunk_count):
    # a hunk header's line count consists of a "+" or "-", then a number, then
    # a comma, then another number
    # the first number is the start line of that side of the hunk, and the
    # second number is the number of lines that side spans
    # the comma and the count may be omitted if the hunk spans exactly one line
    numbers = hunk_count[1:].split(',')
    if len(numbers) == 1:
        return {'start': int(numbers[0]), 'count': 1}
    if len(numbers) == 2:
        return {'start': int(numbers[0]), 'count': int(numbers[1])}
    raise RuntimeError('hunk line count {!r} contains too many commas'.format(hunk_count))


EXTENDED_HEADER_MAP = {
    'old mode': parse_helper_mode_header,
    'new mode': parse_helper_mode_header,
    'deleted file mode': parse_helper_mode_header,
    'new file mode': parse_helper_mode_header,
    'copy from': parse_helper_quoted_filename,
    'copy to': parse_helper_quoted_filename,
    'rename from': parse_helper_quoted_filename,
    'rename to': parse_helper_quoted_filename,
    'similarity index': parse_helper_similarity,
    'dissimilarity index': parse_helper_similarity,
    'index': parse_helper_index_header,
}


# terminology:
# a diff is composed of multiple patches, which is composed of multiple hunks
class DiffList(list):
    def __init__(self, stream):
        # discard the trailing newline on each input line
        self.stream = map(lambda line: desuffix(line, '\n'), stream)
        next_state = self.parse_git_headers
        next_line = next(self.stream, None)
        while next_state is not None:
            next_state, next_line = next_state(next_line)

    # TODO: is it convenient to invoke this with no arguments and fetch the next
    # line from here by default?
    def parse_git_headers(self, line):
        # a git patch starts with "diff --git <file1> <file2>"
        # <file1> and <file2> start with "a/" and "b/" prefixes, respectively
        # (note: the prefixes may be affected by diff.mnemonicPrefix or
        # diff.noprefix, but if you use a plumbing command, those variables
        # will be ignored)
        # ignoring those prefixes, the two names will always be the same unless
        # the file was renamed/copied
        # (note: they will still be the same if the file was created or
        # deleted, /dev/null is not used here)
        # if the filenames contain newlines, quotes, tabs or backslashes, those
        # will be backslash-escaped, and the entire name will be quoted
        # however, spaces will NOT be backslash escaped, so you can't reliably
        # parse the filenames in this line unless you know they're the same (in
        # which case you would also know they had the same length)
        if not line.startswith('diff --git '):
            raise RuntimeError('{!r} is not a git patch header'.format(line))
        self.append({'init_header': line})

        # after that come one or more extended headers, used to indicate file
        # modes and copies/renames
        # the extended headers can theoretically appear in any order, but there
        # should be at most one of each type
        ext_headers = {}
        for line in self.stream:
            for prefix, line_parser in EXTENDED_HEADER_MAP.items():
                try:
                    rest_of_line = deprefix(line, prefix + ' ', check=True)
                except RuntimeError:
                    continue
                if callable(line_parser):
                    rest_of_line = line_parser(rest_of_line)
                if prefix in ext_headers:
                    raise RuntimeError('already parsed extended header {!r} to {!r}, cannot set to {!r}'.format(prefix, ext_headers[prefix], rest_of_line))
                ext_headers[prefix] = rest_of_line
                break
            else:
                # none of the prefixes matched, so this line is not an extended
                # header
                break
        else:
            # we have exhausted the input, and every line was an extended
            # header
            line = None
        # we have stopped parsing extended headers, either because we reached a
        # line that was not an extended header, or because we ran out of lines
        # first we need to validate the extended headers we have parsed
        if 'index' not in ext_headers:
            # TODO: index is always included, right? what other combinations
            # are impossible?
            raise RuntimeError('extended headers {!r} did not contain index line'.format(ext_headers))
        # TODO: if this is not a copy or rename, we should parse the init line
        # here to get the path that was changed
        self[-1]['extended_headers'] = ext_headers
        # if we've run out of lines, then that's it
        if line is None:
            return None, None
        # otherwise, the next line should be the start of a standard patch
        return self.parse_standard_headers, line

    def parse_standard_headers(self, line):
        # if there are no more extended headers and we still have lines to
        # parse, there are three possibilities:
        # this could be the start of a completely new diff
        if line.startswith('diff --git '):
            return self.parse_git_headers, line
        # this could be the start of a binary patch
        if line == 'GIT binary patch':
            return self.parse_binary_patch, line
        # or this could be a text patch
        if line.startswith('--- '):
            # a text patch always has a "---" line and then a "+++" line, which
            # can also be quoted
            # TODO: ignore these lines in favor of the lines parsed from the
            # headers earlier (these would be omitted if the patch was empty)
            self[-1]['before_path'] = parse_helper_quoted_filename(deprefix(line, '--- ', check=True))
            self[-1]['after_path'] = parse_helper_quoted_filename(deprefix(next(self.stream), '+++ ', check=True))
            self[-1]['text_hunks'] = []
            # there must be at least one hunk following this header
            return self.parse_text_hunk, next(self.stream)

    def parse_binary_patch(self, line):
        # git starts a binary patch using this special header line
        if line != 'GIT binary patch':
            raise RuntimeError('{!r} is not the header of a git binary patch'.format(line))
        # a binary patch is always followed by one binary hunk, which we skip
        # over
        self.parse_binary_hunk(next(self.stream))
        # at this point, the patch could be over
        line = next(self.stream, None)
        if line is None:
            return None, None
        if line.startswith('diff --git '):
            return self.parse_git_headers, line
        # or it could contain another binary hunk, which is the inverse of the
        # first one
        self.parse_binary_hunk(line)
        # there cannot be more than two binary hunks in a binary patch, and
        # there can only be one binary patch per file, so at this point, the
        # patch must be over
        return None, None

    # TODO: this should be a parser helper
    def parse_binary_hunk(self, line):
        # a binary hunk starts with the word "literal" or "delta", then the
        # number of uncompressed bytes in the patch
        # literal and delta refer to the way the patch has been encoded, either
        # a binary dump of the entire file, or a diff from one version to the
        # next
        if not (line.startswith('literal ') or line.startswith('delta ')):
            raise RuntimeError('{!r} is not the start of a git binary hunk'.format(line))
        [hunk_type, hunk_length] = line.split(' ')
        # after the length comes a series of binary data lines
        # each line starts with a single character indicating its length,
        # mapping 1-52 bytes to the letters A-Za-z (so A means the line has one
        # byte of data, z means 52 bytes, etc)
        # after the length indicator are the indicated number of bytes, in
        # a custom base85 encoding (similar to zeromq base85)
        # like zeromq's version, the input binary is interpreted in big-endian
        # 4-byte chunks, and each chunk gets encoded to 5 chars
        # however, unlike zeromq, git uses 0-9A-Za-z!#$%&()*+-;<=>?@^_`{|}~ as
        # its mapping
        # padding is done with zero bytes, but since we already know the length
        # from the indicator, we know exactly how much padding there is, and
        # can discard it automatically
        for line in self.stream:
            # the base85 data is terminated by an empty line
            # since we don't care about the actual data, we just skip until we
            # find that line
            if line == '':
                break
        else:
            raise RuntimeError('could not find empty line terminator in binary hunk')

    def parse_text_hunk(self, line):
        # a text hunk always starts with a header of the form
        # @@ <before_lines> <after_lines> @@ <optional context>
        [start, before, after, end] = line.split(' ', maxsplit=3)
        if not (start == '@@' and end.startswith('@@')):
            raise RuntimeError('{!r} is not a hunk header, missing @@ delimiters'.format(line))
        # the before count starts with a "-", and the after count starts with a
        # "+"
        if not (before.startswith('-') and after.startswith('+')):
            raise RuntimeError('{!r} is not a hunk header, line counts should start with -+'.format(line))
        before = parse_helper_hunk_count(before)
        after = parse_helper_hunk_count(after)
        # after a hunk header, we have the actual hunk lines
        # the lines fall into three categories:
        # context (starting with a space)
        # before (starting with a "-")
        # after (starting with a "+")
        # the lines must come in contiguous blocks of before, then after,
        # with blocks of context lines possibly appearing between, and at the
        # start/end
        # in addition, git exposes a special line starting with a backslash,
        # "\ No newline at end of file", which indicates that the preceding
        # line did not have a newline terminator
        # by its very nature, this line must come at the end of its block, and
        # if the no-newline indicator is attached to a context block, then that
        # line must itself be the end of the hunk
        before_seen = 0
        after_seen = 0
        while before_seen < before['count'] or after_seen < after['count']:
            # TODO: actually implement the hunk line state machine
            line = next(self.stream)
            if line.startswith(' '):
                before_seen += 1
                after_seen += 1
            elif line.startswith('-'):
                before_seen += 1
            elif line.startswith('+'):
                after_seen += 1
            elif line == '\ No newline at end of file':
                pass
            else:
                raise RuntimeError('{!r} not expected in hunk'.format(line))
        # the end of a hunk could also be the end of the entire patch
        # TODO: this code is very similar to what we do when we've parsed a
        # binary patch, is there a way to factor this out?
        line = next(self.stream, None)
        if line is None:
            return None, None
        if line.startswith('diff --git '):
            return self.parse_git_headers, line
        # otherwise it must be followed by another hunk
        return self.parse_text_hunk, line


# TODO: we use a dict so that we don't have to define __repr__, but we should
# probably define a proper class
class RawPatch(dict):
    def __init__(self, stream):
        self['patches'] = []
        # discard the trailing newlines on the input lines
        self.stream = map(lambda line: line[:-1], stream)
        next_state = self.parse_header_first
        next_line = next(self.stream)
        while next_line is not None:
            next_state, next_line = next_state(next_line)
        self.clean()

    def cur_patch(self):
        return self['patches'][-1]

    def cur_hunk(self):
        return self.cur_patch()['hunks'][-1]

    def parse_header_first(self, line):
        if not line.startswith('diff --git '):
            raise RuntimeError('{!r} is not a git patch header'.format(line))
        self['patches'].append({
            'header': line,
            'extended': {},
            'hunks': [],
        })
        return self.parse_extended_headers, next(self.stream)

    def parse_extended_headers(self, line):
        for prefix, line_parser in EXTENDED_HEADER_MAP.items():
            try:
                rest_of_line = deprefix(line, prefix + ' ', check=True)
            except RuntimeError:
                continue
            if callable(line_parser):
                rest_of_line = line_parser(rest_of_line)
            if prefix in self.cur_patch()['extended']:
                raise RuntimeError('already parsed extended header {!r} to {!r}, cannot set to {!r}'.format(prefix, self.cur_patch()['extended'][prefix], rest_of_line))
            self.cur_patch()['extended'][prefix] = rest_of_line
            return self.parse_extended_headers, next(self.stream)
        return self.parse_hunk_header, line

    def parse_hunk_header(self, line):
        if line == 'GIT binary patch':
            self.cur_patch()['binary'] = {}
            return self.parse_skip_binary_patch, next(self.stream)
        [hunk_start, before_lines, after_lines, hunk_end] = line.split(' ', maxsplit=3)
        if not (hunk_start == '@@' and hunk_end.startswith('@@') and before_lines.startswith('-') and after_lines.startswith('+')):
            raise RuntimeError('{!r} is not a hunk header'.format(line))
        self.cur_patch()['hunks'].append({
            'before': parse_helper_hunk_count(before_lines),
            'after': parse_helper_hunk_count(after_lines),
            'lines': [],
            'header': '' if hunk_end == '@@' else deprefix(hunk_end, '@@ '),
        })
        return self.parse_diff_lines, next(self.stream)

    def parse_diff_lines(self, line):
        if line[0] in '+- \\':
            self.cur_hunk()['lines'].append({
                'type': line[0],
                'line': line[1:],
            })
            return self.parse_diff_lines, next(self.stream, None)
        if line[0] == '@':
            return self.parse_hunk_header, line
        if line[0] == 'd':
            return self.parse_header_first, line
        raise RuntimeError('{!r} starts with an unexpected character'.format(line))

    def parse_skip_binary_patch(self, line):
        if line.startswith('literal ') or line.startswith('delta '):
            [forward_type, forward_bytes] = line.split(' ')
            self.cur_patch()['binary']['forward'] = {
                'type': forward_type,
                'bytes': int(forward_bytes),
            }
            for line in self.stream:
                if line == '':
                    break
            line = next(self.stream)
            if line.startswith('literal ') or line.startswith('delta '):
                [backward_type, backward_bytes] = line.split(' ')
                self.cur_patch()['binary']['backward'] = {
                    'type': backward_type,
                    'bytes': int(backward_bytes),
                }
                for line in self.stream:
                    if line == '':
                        break
            return self.parse_header_first, next(self.stream, None)
        raise RuntimeError('{!r} is not a binary hunk header'.format(line))

    def clean(self):
        pass


import sys
import json
print(json.dumps(DiffList(sys.stdin), indent=4))
